
- name: Create a auto scaling configuration
  ec2_lc:
    name: "{{ item.name }}"
    image_id: ami-c58c1dd3
    instance_type: t2.micro
    state: present
    region: "{{ aws_region }}"
    security_groups: [ "{{ private_security_group_name }}" ]
    key_name: "{{ key_name }}"
    user_data:  "{{ lookup( 'template', '{{ item.user_data_file }}')}}"
  register: launch_config
  with_items: "{{ launch_configs }}"

- name: Create auto scaling group
  ec2_asg:
    name: "{{ item.name }}"
    launch_config_name: "{{ item.launch_config_name }}"
    health_check_period: 60
    health_check_type: ELB
    min_size: 1
    max_size: 1
    desired_capacity: 1
    region: "{{ aws_region }}"
    vpc_zone_identifier: "{{ my_private_subnet_ids }}"
  with_items: "{{ auto_scaling_groups }}"

- name: Get target group arns
  command: >
    aws elbv2 describe-target-groups --name {{ item.target_group }}
  with_items: "{{ auto_scaling_groups }}"
  register: asg_target_groups

#- name: Debug target group arns  results
#debug: var=asg_target_groups

- name: Asg target group arns
  set_fact:
    asg_target_groups_arn: "{{ (asg_target_groups.results |map(attribute='stdout') | list) }}"

- name: Attach target groups to  a load balancer
  command: >
    aws autoscaling attach-load-balancer-target-groups 
      --auto-scaling-group-name {{ item.0.name }} 
      --target-group-arns {{ (item.1 | from_json).TargetGroups.0.TargetGroupArn }}
  with_together: 
    - "{{ auto_scaling_groups }}"
    - "{{ asg_target_groups_arn }}"

